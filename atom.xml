<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[clean code]]></title>
  <link href="http://cxymrzero.github.io/atom.xml" rel="self"/>
  <link href="http://cxymrzero.github.io/"/>
  <updated>2015-03-19T16:14:04+08:00</updated>
  <id>http://cxymrzero.github.io/</id>
  <author>
    <name><![CDATA[Mr.Zero]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[翻译]Python文件读写]]></title>
    <link href="http://cxymrzero.github.io/blog/2015/03/19/python-file/"/>
    <updated>2015-03-19T13:22:38+08:00</updated>
    <id>http://cxymrzero.github.io/blog/2015/03/19/python-file</id>
    <content type="html"><![CDATA[<p>原文: <a href="http://www.pythonforbeginners.com/files/reading-and-writing-files-in-python">Reading and Writing Files in Python</a></p>

<h3>概览</h3>

<p>在Python中, 读写文件不需要import任何库, 第一步是使用<code>open</code>函数获取一个文件对象</p>

<h3>文件类型</h3>

<p>文件通常被分为<code>文本文件</code>或<code>二进制文件</code>, <code>文本文件</code>通常是由很多行组成的序列(sequence), 而每一行又是很多字符(characters)组成的序列. 每一行由<code>EOL(End Of Line)</code>终结, 最常见的行终结符是<code>\n</code>, 又叫换行符. 反斜杠(backslash)表明下一个字符将被当作一个新行(<em>译注: 这里没理解</em>). 基本上不是文本文件的文件就是二进制文件, 二进制文件只能被了解其文件结构的应用处理.</p>

<h3>Open()</h3>

<p>我们使用内置的<code>open()</code>函数打开一个文件. <code>open()</code>返回一个文件对象, 一般会传入两个参数. 语法是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">file_object</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">mode</span><span class="p">)</span>  <span class="c"># file_object是储存文件对象的变量</span>
</span></code></pre></td></tr></table></div></figure>


<h3>打开方式(mode)</h3>

<p><code>mode</code>参数是可以省略的, 缺省条件下为<code>'r'</code><br/>
<code>mode</code>参数可以是:</p>

<ul>
<li>&lsquo;r&rsquo;, 读文件</li>
<li>&lsquo;w&rsquo;, 仅写文件(如果有同名文件会被覆盖)</li>
<li>&lsquo;a&rsquo;, 添加文本; 所有写入的内容都会被自动添加到文件末尾</li>
<li>&lsquo;r+&rsquo;, 读写文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;workfile&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">f</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来文件对象函数将被调用. 最常用的两个函数是<code>read</code>和<code>write</code>.</p>

<h3>创建一个文本文件</h3>

<p>让我们先来创建一个新文本文件. 你可以随便给它取名字, 在这个例子中我们叫它<code>newfile.txt</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;newfile.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;hello world in the new file</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;and another line</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们打开<code>newfile.txt</code>, 可以看到如下内容:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat newfile.txt
</span><span class='line'>hello world in the new file
</span><span class='line'>and another line
</span></code></pre></td></tr></table></div></figure>


<h3>如何读文本文件</h3>

<p>我们可以用不同的方法来读一个文本文件.</p>

<h4><code>file.read()</code></h4>

<p>如果你想得到一个包含文件中所有字符的字符串, 你可以用<code>file.read()</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;newfile.txt&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>输出:

hello world in the new file
and another line
</code></pre>

<p>我们也可以通过使用<code>file.read(n)</code>来指定字符串应该返回的字符的个数, <code>n</code>确定了字符个数. 下面这段代码读取文本中的前5个字符并将它们作为字符串返回.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;newfile.txt&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>输出:

hello
</code></pre>

<h4>file.readline()</h4>

<p><code>readline()</code>函数会逐行读取文件(而非一次读取整个文件), 调用<code>readline()</code>会获取文件第一行, 之后的调用会返回接下来的行. 通常它会从文件读取单行并返回一个包含直到<code>\n</code>的字符串</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;newfile.txt&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="nb">file</span><span class="o">.</span><span class="n">readline</span><span class="p">():</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>输出:

hello world in the new file
</code></pre>

<h4>file.readlines()</h4>

<p><code>readlines()</code>将整个文件作为一个用<code>\n</code>分隔的列表返回</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;newfile.txt&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="nb">file</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>输出:

['hello world in the new file\n', 'and another line\n']
</code></pre>

<h3>循环遍历一个文件对象</h3>

<p>读取文件的行时, 你可以循环遍历这个文件对象. 这在内存占用上是高效的, 并且写法简单.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;newfile.txt&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">file</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">line</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>输出:

hello world in the new file
and another line
</code></pre>

<h3>file.write()</h3>

<p>写方法需要一个参数, 待写入的字符串. 写入后如果要换行, 在末尾添加一个<code>\n</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;newfile.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;This is a test</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;And here is another line</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>close()</h3>

<p>当你对文件的操作结束后, 调用<code>f.close()</code>来关闭它并且释放打开这个文件所占用的系统资源. 调用<code>f.close()</code>后, 对这个文件的操作都会失败.</p>

<h3>文件句柄(file handler)的用法</h3>

<p>让我们看看一些使用不同方法的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c"># 打开文本文件:</span>
</span><span class='line'><span class="n">fh</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 读文本文件:</span>
</span><span class='line'><span class="n">fh</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">,</span><span class="s">&quot;r&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">fh</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 一次读一行:</span>
</span><span class='line'><span class="n">fh</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="o">.</span><span class="n">txt</span><span class="s">&quot;, &quot;r&quot;)</span>
</span><span class='line'><span class="k">print</span> <span class="n">fh</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 读取文件各行组成的列表:</span>
</span><span class='line'><span class="n">fh</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;hello.txt.&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">fh</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 写文件:</span>
</span><span class='line'><span class="n">fh</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">,</span><span class="s">&quot;w&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">fh</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;Hello World&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">fh</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 写入字符串列表:</span>
</span><span class='line'><span class="n">fh</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">lines_of_text</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;a line of text&quot;</span><span class="p">,</span> <span class="s">&quot;another line of text&quot;</span><span class="p">,</span> <span class="s">&quot;a third line&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">fh</span><span class="o">.</span><span class="n">writelines</span><span class="p">(</span><span class="n">lines_of_text</span><span class="p">)</span>
</span><span class='line'><span class="n">fh</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 在文件后追加内容:</span>
</span><span class='line'><span class="n">fh</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;Hello.txt&quot;</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">fh</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;Hello World again&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">fh</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 关闭文件:</span>
</span><span class='line'><span class="n">fh</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">fh</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="n">fh</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>with语句</h3>

<p>另一种处理文件的方式是<code>with</code>语句. 使用<code>with</code>语句是很好的做法. 通过<code>with</code>语句, 你就有了更好的语法和异常处理.<br/>
另外, 它会自动关闭文件. <code>with</code>语句提供了一种保证资源得到释放的方法.<br/>
使用<code>with</code>打开文件很简单:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们来看些例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;newtext.txt&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>   <span class="c"># Use file to refer to the file object</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>    <span class="n">do</span> <span class="n">something</span> <span class="k">with</span> <span class="n">data</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样地, 你也可以循环遍历文件对象:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;newfile.txt&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">line</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意, 我们不需要写<code>file.close()</code>, 它会被自动调用.</p>

<h3>使用<code>with</code>的例子</h3>

<p>让我们通过一些例子来看看平常我们可以怎么用到它</p>

<h4>用<code>with</code>写文件</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;hello.txt&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;Hello World&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>逐行读取文件</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;hello.txt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h4>分割行</h4>

<p>最后一个例子中, 我们将看到如何从一个文本文件中分割行. <code>split</code>函数将变量<code>data</code>中包含的字符串以空格符为分割符分割开. 你也可以根据任何你想要的分割符分割, 例如<code>line.split(':')</code>会用冒号分割字符串</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;data.txt&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>        <span class="n">words</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">words</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>输出:

Because multiple values are returned by split, they are returned as an array.
['hello', 'world,', 'how', 'are', 'you', 'today?']
['today', 'is', 'saturday']
</code></pre>

<h3>扩展阅读</h3>

<p>[1] <a href="http://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files">http://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files</a><br/>
[2] <a href="http://www.pythonforbeginners.com/cheatsheet/python-file-handling/">http://www.pythonforbeginners.com/cheatsheet/python-file-handling/</a><br/>
[3] <a href="http://en.wikibooks.org/wiki/Non-Programmer's_Tutorial_for_Python_3/">http://en.wikibooks.org/wiki/Non-Programmer&#8217;s_Tutorial_for_Python_3/</a><br/>
[4] <a href="http://chryswoods.com/beginning_python/">http://chryswoods.com/beginning_python/</a></p>

<h3>译后记</h3>

<p>呼, 终于译完了这篇水文&hellip;完全新手向的一篇文章, 译完才发现比我以为的要浅好多, 算是复习文件操作吧~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[老博文迁移]推土小记]]></title>
    <link href="http://cxymrzero.github.io/blog/2015/03/18/oh-so-sad/"/>
    <updated>2015-03-18T16:20:38+08:00</updated>
    <id>http://cxymrzero.github.io/blog/2015/03/18/oh-so-sad</id>
    <content type="html"><![CDATA[<p>十一这几天留在学校没回家跟胡扬，胡淼，强哥一起“推土”加上写一点新版新闻网的后台，这次来客串写点php。“推土”就是把原来的像17,43,45这几台跑windows的老机器尽量换成linux的，还有几台跑在45上的虚拟机都搬到13,14上。哎，想想之前做的有那么多网站就觉得好累。</p>

<!-- more -->


<p>今天一天我完成了原来用discuz搭的bbs的迁移，<a href="http://blog.bingyan.net/">冰岩博客</a>的迁移和华中大知多少的迁移，原先代码都在43上，数据库在17上，都是windows服务器，43上还有ftp服务，17上就什么都没有，dump下来的表都是用百度云上传的==！最后把它们全都放到13上了，整个都是体力劳动啊，后面应该想想一些重复的劳动怎样用脚本来解决掉。</p>

<h3>数据库导出与导入</h3>

<p><code>mysqldump -u username -p dbname &gt; name.sql</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">dbname</span><span class="p">;</span>
</span><span class='line'><span class="n">USE</span> <span class="n">dbname</span><span class="p">;</span>
</span><span class='line'><span class="k">SOURCE</span> <span class="n">name</span><span class="p">.</span><span class="k">sql</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还是相当方便的</p>

<h3>scp命令</h3>

<ul>
<li>从本地到服务器，2012是端口，不同服务器不同
<code>scp -P2012 /home/mrzero/test.txt user@example.com:/home/user</code></li>
<li>从服务器到本地
<code>scp -P2012 user@example.com:/home/user/test.txt /home/mrzero</code><br/>
scp这个命令还真是不好用，又臭又长还不能tab出文件名，很蛋疼。如果有图形界面的话，还是用filezilla来传文件吧。</li>
</ul>


<h3>ftp下载</h3>

<p>我用Python写了一段脚本来下上传的文件，先是在iPython里一点点测试，成功后用scp传到13上的。用到的是<code>ftplib</code>，这是Python的标准库，果然是battery include啊～～</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">ftplib</span> <span class="kn">import</span> <span class="n">FTP</span>
</span><span class='line'>
</span><span class='line'><span class="n">ftp</span> <span class="o">=</span> <span class="n">FTP</span><span class="p">()</span>
</span><span class='line'><span class="n">ftp</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&quot;xxxxxxx&quot;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">xxxx</span><span class="p">)</span>
</span><span class='line'><span class="n">ftp</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="s">&quot;xxxxxx&quot;</span><span class="p">,</span> <span class="n">passwd</span><span class="o">=</span><span class="s">&quot;xxxxx&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">filehandler</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;test.txt&#39;</span><span class="p">,</span> <span class="s">&#39;wb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span>
</span><span class='line'><span class="c"># ftp.retrbinary(&#39;RETR robots.txt&#39;, filehandler)</span>
</span><span class='line'><span class="n">ftp</span><span class="o">.</span><span class="n">cwd</span><span class="p">(</span><span class="s">&#39;chenxiangyu&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">ftp</span><span class="o">.</span><span class="n">retrbinary</span><span class="p">(</span><span class="s">&#39;RETR test.txt&#39;</span><span class="p">,</span> <span class="n">filehandler</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>感觉写得相当挫，不过能用=。=
后面再改改能加上命令行参数就能在团队里共享，以后部署到服务器上就很欢乐了，现在简直是&hellip;
不过在部署和管理方面，shell scripts应该能更自在地工作，后面一空下来就要学学shell scripts啊！</p>

<h3>php的部署流程</h3>

<ul>
<li>把代码目录放到/var/www/example.com下</li>
<li>在/etc/nginx/sites-avalible下建配置文件</li>
<li>在/etc/nginx/sites-enabled下建立到avalible目录的软链接
<code>ln -s example.com ../sites-avalible/example.com</code></li>
<li>reload nginx一下，把配置文件更新</li>
<li>对于搬迁服务器来说，还要在dnspod上将域名的指向改掉，并修改数据库配置，等一下下，没bug就可以去玩啦～～～</li>
</ul>


<p>奥，就是这个样子，明天再在自己电脑上折腾下把nginx配好吧，还要从零入门php和CI框架。哎，十一也过的这么累，不过还是进步很快的就是啦，最后谢谢胡扬大神的悉心指导，bug还要加油才是！</p>

<p><em>2014-10-4 于博客园</em></p>

<p>迁移批注:<br/>
<code>scp</code>不能tab出文件名是<code>ssh key</code>的问题. 之前部署网站这种重复性的劳动也用脚本解决了一些, 不过说好的运维平台还是没有搭起来, 不知什么时候可以搭起来&hellip;</p>

<p>即使现在想想那段每天迁网站调bug的日子还是很痛苦, 三四点睡都是家常便饭了, 最后效果还是不够好, 负载均衡没有搭起来, 单点故障的问题还是没有解决, 数据库依然是本机, 除了我用自己写的脚本部署外大家还是手动复制粘贴<code>nginx</code>配置, 只能说现在还是太弱了, 运维知识不足, 对架构理解也不深, 当时都没能理解胡扬到底要我干啥. 也许到公司实习之后可以改变团队服务器的现状吧, 可那时我还会能抵住更有趣的项目和钱的诱惑回来整团队服务器吗, 我要打上一个大大的问号&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[老博文迁移]linux管道命令学习(一)]]></title>
    <link href="http://cxymrzero.github.io/blog/2015/03/18/linux-pipe-1/"/>
    <updated>2015-03-18T16:06:38+08:00</updated>
    <id>http://cxymrzero.github.io/blog/2015/03/18/linux-pipe-1</id>
    <content type="html"><![CDATA[<p>继续看鸟哥私房菜，看一直很想弄懂的<code>管道命令(pipe)</code>。第一次知道管道这个词还是在学<code>django</code>的时候，模板里的过滤器很像这里的管道。管道就是将输出在标准输出中的信息一次次处理最终打印在标准输出中，所以管道命令必须是接受标准输出的命令，<code>cp</code> <code>mv</code> <code>ls</code>都不是管道命令。</p>

<!-- more -->


<h3>好用的<code>less</code>和<code>tail</code></h3>

<h4>less</h4>

<p>如<code>ls -al /etc | less</code>就能用类似<code>vi</code>的方式浏览在屏幕上打印的内容了。还能用<code>vi</code>里的查找命令<code>/</code>、<code>?</code>，可以避免滚屏，非常好用。</p>

<h4>tail</h4>

<ul>
<li><code>tail filename</code>输出文件最后10行</li>
<li><code>tail -n 5 filename</code>输出文件最后5行</li>
<li><code>tail -F filename</code>监视文件的改变，一有变化就显示出来</li>
</ul>


<p>在分析error log的时候非常有用，可以查看最近的错误信息。</p>

<h3>选取命令<code>cut</code>和<code>grep</code></h3>

<h4>cut</h4>

<p>cut针对的是输出的每一行，解释两个命令：</p>

<ul>
<li><code>echo $PATH | cut -d ':' -f 5</code>
-d 选项后面紧跟分隔符，-f表示取第5段</li>
<li><code>export | cut -c 12-</code>
-c 选项表示选取的字符数，从12到结尾，也可是类似12-15这样</li>
</ul>


<h4>grep</h4>

<p>grep真是神一般的命令，可以配合<code>ps aux</code>找到想要的进程。
参数</p>

<ul>
<li>-c计算找到的被查找字符串的次数</li>
<li>-i忽略大小写</li>
<li>-v输出查找结果的补集
例如<code>last | grep -v 'root'</code>找出非root的登陆</li>
</ul>


<p>睡觉，明天继续整理剩下的内容ww</p>

<p><em>2014-9-22 于博客园</em></p>

<p>迁移批注:<br/>
Yesterday you said tomorrow&hellip;有了&#8221;一&#8221;就再没&#8221;二&#8221;了&hellip;<br/>
不过后来除了<code>cut</code>外这几个命令都很常用, 使用<code>linux</code>时还是带来了很大帮助~ 需要继续学习~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[老博文迁移]linux进程管理]]></title>
    <link href="http://cxymrzero.github.io/blog/2015/03/18/linux-process/"/>
    <updated>2015-03-18T15:35:11+08:00</updated>
    <id>http://cxymrzero.github.io/blog/2015/03/18/linux-process</id>
    <content type="html"><![CDATA[<p>作为一个新手，部署Python网站的时候总会出各种各样的问题，这个时候我就很想知道是哪个程序没有运行。这几天读了鸟哥私房菜的进程管理这一章，还没读完，先做下笔记。</p>

<!--more-->


<h3>什么是进程？</h3>

<p><strong>一个程序被加载到内存中运行，在内存中的数据就被称为进程.</strong> 在Linux下，所有的命令在执行时都会被系统定义为一个<code>进程</code>，这条命令会被分配一个ID，称为<code>PID</code>，执行这条命令的用户会被分配一个<code>UID</code>，系统根据UID来判别执行命令的权限。</p>

<p>进程就是正在运行中的程序。</p>

<p>子进程是父进程衍生出来的进程，用<code>fork and exec</code>的方式产生，<code>PPID</code>值与父进程<code>PID</code>值相同可以用<code>ps -l</code>来查看当前用户的所有进程。</p>

<h3>工作管理(job control)</h3>

<p>Linux下的工作管理很像windows的任务管理器。工作管理是将进程控制在前台或后台运行，后台运行的程序必须是与用户没有交互，换句话说不用等待输入的。出现提示符让你操作的环境称为<code>前台(foreground)</code>，反之称为<code>后台(background)</code></p>

<p>可以在执行的命令后加上<code>&amp;</code>把它丢到后台去执行，如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>tar -zpcf /tmp/etc.tar.gz /etc <span class="p">&amp;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
终端里会显示出PID，如果有出错信息，会提示，可以看到命令提示符。</p>

<h4>CTRL+Z 与 CTRL+C</h4>

<p>CTRL+Z可以将进程暂停放到后台，<strong>进程是没有停止的！</strong>CTRL+C是停止当前的进程。被CTRL+Z放到后台暂停的进程，可以通过<code>fg</code>和<code>bg</code>调整为运行状态。先查看一下当前后台工作状态：
<code>jobs [-lrs]</code></p>

<ul>
<li>-l：列出命令及PID</li>
<li>-r：列出运行的进程(run)</li>
<li>-s：列出后台暂停的进程(stop)<br/>
然后用<code>fg %jobnumber</code>可以调到前台（<code>%</code>可有可无，jobnumber为任务编号，不是PID）或是用<code>bg %jobnumber</code>来在后台运行。</li>
</ul>


<h4>kill</h4>

<p><code>kill -signal %jobnumber</code>
- signal：</p>

<ul>
<li>-1：重新读取配置文件（类似reload）（左边是原文，不懂是干嘛的，如果明白烦请指点>&lt;）</li>
<li>-2：与键盘ctrl+c作用相同</li>
<li>-9：强制删除一个工作</li>
<li>-15：以正常方式结束一个工作</li>
</ul>


<h4>脱机管理</h4>

<p>脱机管理是指当你用远程终端登陆服务器时，如果直接以<code>&amp;</code>方式将任务放到后台掉线之后进程是不会继续执行的，可以用<code>nohup</code>来解决，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nohup ./sleep500.sh <span class="p">&amp;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>查看进程</h4>

<p>ps命令可以静态查看系统进程。</p>

<ul>
<li><code>ps -l</code>查看自己bash相关进程</li>
<li><code>ps aux</code>查看系统所有进程，配合grep等管道命令用</li>
</ul>


<p><em>2014-9-21 于博客园</em></p>

<p>迁移批注:<br/>
其实到今天那一章还是没读完&hellip;拖延就是这么产生的&hellip;</p>

<p>之后学习到<code>ps aux | grep uwsgi | awk {'print $2'} | xargs sudo kill -9</code>这个神奇的命令, 后面还要详细学习<code>awk</code>的主要用法, 目前只会这一个命令, 用于重启<code>uwsgi</code>等等的进程已经足够了</p>

<p>对于<code>ps</code>和<code>kill</code>两个命令, 目前团队里大家的做法依然是简单粗暴的<code>ps aux</code>和<code>kill -9</code>, 感觉对<code>kill</code>用得还是不够好&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[老博文迁移]jinja2模板使用经验]]></title>
    <link href="http://cxymrzero.github.io/blog/2015/03/18/jinja-practice/"/>
    <updated>2015-03-18T13:19:01+08:00</updated>
    <id>http://cxymrzero.github.io/blog/2015/03/18/jinja-practice</id>
    <content type="html"><![CDATA[<p>用<code>jinja2</code>写模板的时候遇到了一些问题，记录一下</p>

<!--more-->


<h3>抽出base.html作为模板</h3>

<p>之前的小项目写得都很不规范，模板都是能用就行，基本上只用到<code>if</code>语句，<code>for</code>语句和变量。导航栏都是复制粘贴，没有把共同的部分抽出来。写模板的时候还应该注意一下不要直接在原来的html上改，这样容易把html改乱，应该新建一个<code>template</code>目录，再一个个写模板，这样更好</p>

<p>参照<a href="http://jinja.pocoo.org/docs/dev/templates/">jinja2的文档</a>抽出公共部分，如</p>

<figure class='code'><figcaption><span> (jinja0.html)</span> <a href='http://cxymrzero.github.io/downloads/code/html/jinja0.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/1999/xhtml&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>{% block head %}
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;title&gt;</span>{% block title %}{% endblock %} - My Webpage<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>{% endblock %}
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>{% block content %}{% endblock %}<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        {% block footer %}
</span><span class='line'>        <span class="ni">&amp;copy;</span> Copyright 2008 by <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://domain.invalid/&quot;</span><span class="nt">&gt;</span>you<span class="nt">&lt;/a&gt;</span>.
</span><span class='line'>        {% endblock %}
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在子模板中填充对应的<code>block</code>就行，如
对于在base.html里有但是子模板里没有的<code>block</code>，对应位置会采用base.html里的内容</p>

<figure class='code'><figcaption><span> (jinja1.html)</span> <a href='http://cxymrzero.github.io/downloads/code/html/jinja1.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% block title %}
</span><span class='line'>我是标题
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>


<h3>导航栏怎么设置为active?</h3>

<p>很多用到导航栏的情况都会有当前所在位置高亮的设置，假设CSS中<code>.active</code>设为高亮了，那么在jinja2中就能给base.html传值，如：</p>

<figure class='code'><figcaption><span> (jinja2.html)</span> <a href='http://cxymrzero.github.io/downloads/code/html/jinja2.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;bd clearfix&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;team clearfix {% if active == &quot;</span><span class="na">team</span><span class="err">&quot;</span> <span class="err">%}</span><span class="na">now</span><span class="err">{%</span> <span class="na">endif</span> <span class="err">%}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/team&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;circle circle1&quot;</span> <span class="na">title=</span><span class="s">&quot;团队介绍&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hover-wrap&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>Team Introduction<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;ch&quot;</span><span class="nt">&gt;</span>团队介绍<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;group clearfix {% if active == &quot;</span><span class="na">group</span><span class="err">&quot;</span> <span class="err">%}</span><span class="na">now</span><span class="err">{%</span> <span class="na">endif</span> <span class="err">%}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;circle circle2&quot;</span> <span class="na">title=</span><span class="s">&quot;各组介绍&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hover-wrap&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>Group Introduction<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;ch&quot;</span><span class="nt">&gt;</span>各组介绍<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;pro clearfix {% if active == &quot;</span><span class="na">works</span><span class="err">&quot;</span> <span class="err">%}</span><span class="na">now</span><span class="err">{%</span> <span class="na">endif</span> <span class="err">%}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/works&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;circle circle3&quot;</span> <span class="na">title=</span><span class="s">&quot;陈列室&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hover-wrap&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>Portfolio<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;ch&quot;</span><span class="nt">&gt;</span>陈列室<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;part clearfix {% if active == &quot;</span><span class="na">partner</span><span class="err">&quot;</span> <span class="err">%}</span><span class="na">now</span><span class="err">{%</span> <span class="na">endif</span> <span class="err">%}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/partner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;circle circle4&quot;</span> <span class="na">title=</span><span class="s">&quot;成员风采&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hover-wrap&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>Our Partner<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;ch&quot;</span><span class="nt">&gt;</span>成员风采<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;re clearfix&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://hr.bingyan.net/&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;circle circle5&quot;</span> <span class="na">title=</span><span class="s">&quot;历届招新&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;hover-wrap&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>Recruit<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;ch&quot;</span><span class="nt">&gt;</span>历届招新<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在子模板中，向base.html传<code>active</code>的值就行了，我们不只可以通过py文件向jinja2传值，还能在不同模板之间传值</p>

<figure class='code'><figcaption><span> (jinja3.html)</span> <a href='http://cxymrzero.github.io/downloads/code/html/jinja3.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &quot;base.html&quot; %}
</span><span class='line'>{% set active = &quot;group&quot; %}
</span></code></pre></td></tr></table></div></figure>


<p>这样导航栏就能根据相应的内容显示高亮的<code>li</code>了！更多内容参考<a href="http://jinja.pocoo.org/docs/dev/tricks/">官方文档</a></p>

<h3>如何获取列表的长度？</h3>

<p>jinja2支持很多Python的语法，于是我尝试调用<code>len(lst)</code>函数，会报错。
要获取列表的长度，应该写成<code>lst|length</code>或是它的别称<code>lst|count</code>
参考<a href="http://stackoverflow.com/questions/1465249/jinja2-get-lengths-of-list">这个问题</a></p>

<p><em>2014-9-10 于博客园</em></p>

<p>迁移批注:<br/>
这篇博文由于包含<code>jinja2</code>的模板语法, 在解析时会与<code>liquid</code>发生冲突而报错, 于是我采用<a href="http://octopress.org/docs/blogging/code/">载入代码文件</a>的方式解决了这个问题!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Flask实现用户认证API]]></title>
    <link href="http://cxymrzero.github.io/blog/2015/03/18/flask-token/"/>
    <updated>2015-03-18T00:32:28+08:00</updated>
    <id>http://cxymrzero.github.io/blog/2015/03/18/flask-token</id>
    <content type="html"><![CDATA[<p>我们在开发网站时会采用<code>session</code>和<code>cookie</code>的方式来处理登录权限问题, 而在移动应用中要验证用户身份采用登录时给用户生成一个<code>token(令牌)</code>的方式. 每次用户发出需要身份认证的请求时, 就需要验证一次<code>token</code>是否有效, 无效的情况包括<code>token</code>无法被解析等. 另一个问题是如果<code>token</code>被泄露, 用户的安全将受到威胁, 所以应当对这个<code>token</code>设置一个过期时间, 超过这个时间后应当重新登录, 这样可以将用户信息泄露的风险降低.</p>

<!--more-->


<h3>生成和使用<code>token</code></h3>

<p>有个很棒的Python第三方库叫<code>itsdangerous</code>, 包含许多常见安全问题的解决方案, 比如文件名等等.</p>

<h4>生成<code>token</code></h4>

<p><code>TimedJSONWebSignatureSerializer</code>能将包含用户id的字典, 如<code>{'user_id': 1}</code>设置一个具有过期时间的<code>数字证书(Signature)</code>, 需要注意的是, 设置的<code>secret key</code>一定要足够安全, 在<code>flask</code>应用中, 我们采用<code>flask</code>配置中的<code>secret key</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">itsdangerous</span> <span class="kn">import</span> <span class="n">TimedJSONWebSignatureSerializer</span> <span class="k">as</span> <span class="n">Serializer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">itsdangerous</span> <span class="kn">import</span> <span class="n">SignatureExpired</span><span class="p">,</span> <span class="n">BadSignature</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">config</span> <span class="kn">import</span> <span class="n">config</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gen_token</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">expiration</span><span class="o">=</span><span class="mi">1440</span><span class="o">*</span><span class="mi">31</span><span class="o">*</span><span class="mi">60</span><span class="p">):</span>  <span class="c"># 单位为秒, 设定31天过期</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Serializer</span><span class="p">(</span><span class="n">config</span><span class="o">.</span><span class="n">SECRET_KEY</span><span class="p">,</span> <span class="n">expires_in</span><span class="o">=</span><span class="n">expiration</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span><span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">})</span>  <span class="c"># user为model中封装过的对象</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>验证<code>token</code>合法性以及是否过期</h4>

<p><code>装饰器(decorator)</code>是<code>Python</code>一个很有用的语法糖, 可以有效地减少重复代码. 在每个需要验证<code>token</code>的场景都用装饰器包裹一层, 就能验证无效<code>token</code>和过期<code>token</code>了~</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">token_required</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">token</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">&#39;token&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">Serializer</span><span class="p">(</span><span class="n">config</span><span class="o">.</span><span class="n">SECRET_KEY</span><span class="p">)</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">SignatureExpired</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;fail&#39;</span><span class="p">,</span> <span class="s">&#39;data&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;msg&#39;</span><span class="p">:</span> <span class="s">&#39;expired token&#39;</span><span class="p">}})</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">BadSignature</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;fail&#39;</span><span class="p">,</span> <span class="s">&#39;data&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;msg&#39;</span><span class="p">:</span> <span class="s">&#39;useless token&#39;</span><span class="p">}})</span>
</span><span class='line'>        <span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;user_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span></code></pre></td></tr></table></div></figure>


<p>例如实现一个关注用户的操作, 在视图函数中这样调用装饰器<code>token_required</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@user.route</span><span class="p">(</span><span class="s">&#39;/follow&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;POST&#39;</span><span class="p">])</span>
</span><span class='line'><span class="nd">@token_required</span>
</span><span class='line'><span class="k">def</span> <span class="nf">follow_user</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
</span><span class='line'>    <span class="n">user_to_follow_id</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">&#39;user_id&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">user_rel</span> <span class="o">=</span> <span class="n">UserRel</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">user_to_follow_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="n">Model</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">model</span><span class="o">.</span><span class="n">get_user_rel</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">user_to_follow_id</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">to_json</span><span class="p">(</span><span class="s">&#39;already follow&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user_to_follow</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">UserInfo</span><span class="p">)</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">user_id</span><span class="o">=</span><span class="n">user_to_follow_id</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">user_to_follow</span><span class="o">.</span><span class="n">data</span><span class="p">()</span>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">user_rel</span><span class="p">)</span>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">to_json</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">success</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c"># 将flask中的jsonify封装了一层</span>
</span></code></pre></td></tr></table></div></figure>


<p>可是这样每个视图函数中需要一个<code>user_id</code>的参数, 这样还是存在重复, 不知是不是我装饰器用得不对:(</p>

<h3>参考</h3>

<p>[1]<a href="http://www.cnblogs.com/vovlie/p/4182814.html">使用Flask设计带认证token的RESTful API接口</a><br/>
[2]<a href="http://pythonhosted.org/itsdangerous/">itsdangerous文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[老博文迁移]web.py+fastcgi+nginx 502]]></title>
    <link href="http://cxymrzero.github.io/blog/2015/03/17/webpy-502/"/>
    <updated>2015-03-17T23:45:42+08:00</updated>
    <id>http://cxymrzero.github.io/blog/2015/03/17/webpy-502</id>
    <content type="html"><![CDATA[<p>用<code>web.py</code>照着<a href="http://webpy.org/cookbook/fastcgi-nginx.zh-cn">官方文档</a>在服务器上搭好了后台。这次很奇怪地出现了一个Nginx 502 Bad Gateway的错误。</p>

<p>执行上面的<code>kill `pgrep -f "python /path/to/www/index.py"`</code>会出现错误提示，可是启动脚本的时候明明是提示<code>spawn-fcgi: child spawned successfully: PID: 32401</code>的信息的，然后还可以继续执行<code>spawn-fcgi -d /path/to/www -f /path/to/www/index.py -a 127.0.0.1 -p 9002</code>的脚本
，同样会提示成功。</p>

<!--more-->


<p>原因是<strong>进程确实创建成功了，但是又马上终止了！！</strong>
这时用<code>spawn-fcgi</code>的<code>-n</code>选项就能看到错误信息了。原来是index.py里少了一行<code>import os</code>，一开始就出错了，而不是访问某个具体地址时会报错。类似的情况在php下面也容易碰到，php的语法错导致php5-fpm一开启就死掉，用<code>php5-fpm -e</code>可以查看错误原因。</p>

<p>这里还要注意是否是按照官网上的步骤配置的web.py部署条件，有没有安装web.py, spawn-fcgi和flup，如果没有安装可以用<code>sudo pip install web.py</code>，<code>sudo apt-get install spawn-fcgi</code>，<code>sudo apt-get install python-flup</code>（ubuntu下），没安装依赖也会导致同样的错误。</p>

<p>解决是google到<a href="http://python.6.x6.nabble.com/CPyUG-spawn-fcgi-web-py-td2737790.html">这里</a>的解决方案。</p>

<p><em>2014-9-10 于博客园</em></p>

<p>迁移批注:<br/>
这是在部署<a href="http://new.bingyan.net/">冰岩新官网</a>出bug后写的博文, 其实是使用<code>web.py</code>线上代码和开发环境不一致导致的(服务器采用Nginx+FastCGI, 本地是直接解释器运行), <code>web.py</code>在部署时还得根据环境改代码, 这种做法是非常操蛋的, 我也没找到最佳实践, 而<code>flask</code>就不存在类似问题. 另外<code>web.py</code>的作者已经饮弹自尽, 没有继续开发了, 加上文档缺失等原因, <code>web.py</code>已经被抛弃了, 不过它足够简单, 作为Python web开发入门的学习框架还是很合适的, 它也是我的初恋, 相爱相杀! <code>tornado</code>与它写法很相似, 闲下来我会学习的!</p>

<p><code>502 Bad Gateway</code>其实很常见, 字面意思是网关错误, 原因几乎都是前端<code>Nginx</code>将请求反向代理到后端的进程, 如<code>uwsgi</code>或<code>php-fpm</code>等进程管理工具跑起来的进程, 没有成功运行导致的, 这种情况首先应该检查进程有没有起, 生产环境与开发环境是否不同.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新博客终于搭起来了]]></title>
    <link href="http://cxymrzero.github.io/blog/2015/03/15/new-blog/"/>
    <updated>2015-03-15T19:19:36+08:00</updated>
    <id>http://cxymrzero.github.io/blog/2015/03/15/new-blog</id>
    <content type="html"><![CDATA[<h3>啰嗦</h3>

<p>去年大概这个时候, 用<code>jekyll</code>和<code>github pages</code>搭了一个静态博客, 当时乱折腾把ruby环境给折腾坏了, 加上对之前的主题始终不满意(代码高亮差以及审美疲劳等&hellip;), 一年都没有更博. 然后在博客园写了十几篇博客, 隔段时间看, 擦, 写得好low!</p>

<p>比较好的办法就是经常写, 把那些很low的文章顶到很多页之前, 就没人笑话了.</p>

<!--more-->


<p>新博客将<code>jekyll</code>换成了<code>octopress</code>, 因为喜欢这个博客主题, 同样是用markdown写博客, 代码高亮支持得很好, 自带的好看的<code>solarized dark</code>配色, 搭建流程参看<a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/#octopress--github-pages">这篇博文</a></p>

<h3>发博客很简单</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd </span>octopress  <span class="c"># 进入博客目录</span>
</span><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="o">]</span>  <span class="c"># title是文章名, 在生成的markdown文件名里</span>
</span><span class='line'>rake preview  <span class="c"># 实时预览, 我用Mou写markdown, 保存后刷新网页即可</span>
</span><span class='line'>rake gen_deploy  <span class="c"># 自动生成HTML网页, 并且进行一次commit and push, 还有贴心的commit message =w=</span>
</span></code></pre></td></tr></table></div></figure>


<h3>坑</h3>

<p>由于我用的是<code>zsh</code>, <code>rake new_post</code>命令不支持<code>zsh</code>, 每次还要切回<code>bash</code>才能自动生成新文章, 我在考虑写个脚本完成这件事</p>

<h3>定制修改</h3>

<h4>加上about页面</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake new_page<span class="o">[</span><span class="s2">&quot;about&quot;</span><span class="o">]</span>  <span class="c"># 注意这里是`page`</span>
</span></code></pre></td></tr></table></div></figure>


<p>并根据<a href="http://octopress.org/docs/theme/template/">文档</a>修改navigation的配置</p>

<h4>加上disqus评论</h4>

<p>首先注册disqus并设置自己的shortname, 在<code>_config.yml</code>中加上自己的shortname</p>

<h4>添加侧边栏文章分类</h4>

<p>看<a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">这篇博客</a>, 折腾完还要<code>Ctrl+C</code>再执行下<code>rake preview</code>, 并且注意, 如果你的分类中有中文博客里的代码会出bug, 需要自己hack一下, 或者像我压根就不用中文做分类名&hellip;</p>

<p>最后推荐这份<a href="http://shengmingzhiqing.com/blog/octopress-tutorials-toc.html/">教程</a>(不过这哥们貌似写完这份教程之后都没更博了囧)</p>

<h4>添加&#8221;继续阅读&#8221;按钮</h4>

<p><a href="http://shengmingzhiqing.com/blog/octopress-lean-modification-1.html/#section-8">教程在此</a>, 修改<code>_config.yml</code>, 查找到<code>excerpt_link: "Read on &amp;rarr;"</code>这一段, 默认设置是文中<code>&lt;!--more--&gt;</code>之前的内容会显示到首页上</p>
]]></content>
  </entry>
  
</feed>
